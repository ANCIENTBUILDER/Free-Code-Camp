JAVA: FUNCTIONAL PROGRAMMING

Learn About Functional Programming:
const tea4TeamFCC = getTea(40);

Understand Functional Programming Terminology:
const tea4GreenTeamFCC = getTea(prepareGreenTea, 27);
const tea4BlackTeamFCC = getTea(prepareBlackTea, 13);

Understand the Hazards of Using Imperative Code:
  const tabsBeforeIndex = this.tabs.slice(0, index); // Get the tabs before the tab
  const tabsAfterIndex = this.tabs.slice(index + 1); // Get the tabs after the tab
  this.tabs = tabsBeforeIndex.concat(tabsAfterIndex); // Join them together

Avoid Mutations and Side Effects Using Functional Programming:
return fixedValue +1;

Pass Arguments to Avoid External Dependence in a Function:
function incrementer (valueToIncrement) {
  return valueToIncrement + 1;

Refactor Global Variables Out of Functions:
// The global variable
const bookList = ["The Hound of the Baskervilles", "On The Electrodynamics of Moving Bodies", "PhilosophiÃ¦ Naturalis Principia Mathematica", "Disquisitiones Arithmeticae"];

// Change code below this line
function add(bookName) {

  bookList.push(bookName);
  return bookList;
  
  // Change code above this line
}

// Change code below this line
function remove(bookName) {
  const book_index = bookList.indexOf(bookName);
  if (book_index >= 0) {

    bookList.splice(book_index, 1);
    return bookList;

    // Change code above this line
    }
}
