PYTHON - SCIENTIFIC COMPUTING

Who should learn to program? -----------------------------------------------------------------------------
Everyone.

Where are your programs stored when they are running? ----------------------------------------------------
Memory.

What will print out after running these two lines of code: -----------------------------------------------
  x = 6
  print(x)
6

What will the following program print out: ---------------------------------------------------------------
  x = 43
  x = x + 1
  print(x)
44

What is the symbol used in an assignment statement? -------------------------------------------------------
=

What is the purpose of the "def" keyword in Python? -------------------------------------------------------
  It indicates the start of a function, and the following indented section of code is to be stored for later.
  
Which code is indented correctly to print "Yes" if x = 0 and y = 10? --------------------------------------
if 0 == x:
    if y == 10:
        print("Yes")

Given the following code: ---------------------------------------------------------------------------------
  temp = "5 degrees"
  cel = 0
  fahr = float(temp)
  cel = (fahr - 32.0) * 5.0 / 9.0
  print(cel)
3,4

What is the purpose of the "def" keyword in Python? ------------------------------------------------------
  It indicates the start of a function, and the following indented section of code is to be stored for later.

What will the following Python program print out?: -------------------------------------------------------
  def fred():
      print("Zap")
  def jane():
      print("ABC")

  jane()
  fred()
  jane()

ABC
Zap
ABC

What will the following code print out?: -----------------------------------------------------------------
  n = 0
  while True:
      if n == 3:
          break
      print(n)
      n = n + 1
0
1
2




What will the following code print?: ---------------------------------------------------------------------
  for n in "banana":
    print(n)
banana 
 
What is the value of i in the following code? ------------------------------------------------------------
  word = "bananana"
  i = word.find("na")
2

What is used to indicate a new line in a string?  --------------------------------------------------------
\n

What does the word 'continue' do in the middle of a loop?  -----------------------------------------------
  Skips to the next iteration of the loop.
  
What is the value of x after running this code: ----------------------------------------------------------
  fruit = "banana"
  x = fruit[1]  
a

Which method is used to add an item at the end of a list? -------------------------------------------------
append

What does n equal in this code? --------------------------------------------------------------------------
  words = 'His e-mail is q-lar@freecodecamp.org'
  pieces = words.split()
  parts = pieces[3].split('-')
  n = parts[1]
lar@freecodecamp.org

What does dict equal after running this code?: -----------------------------------------------------------
  dict = {"Fri": 20, "Thu": 6, "Sat": 1}
  dict["Thu"] = 13
  dict["Sat"] = 2
  dict["Sun"] = 9
{'Fri': 20, 'Thu': 13, 'Sat': 2, 'Sun': 9}

What will the following code print? -----------------------------------------------------------------------
  counts = { 'quincy' : 1 , 'mrugesh' : 42, 'beau': 100, '0': 10}
  print(counts.get('kris', 0))
0

What will the following code print?: ---------------------------------------------------------------------
  counts = { 'chuck' : 1 , 'annie' : 42, 'jan': 100}
  for key in counts:
      if counts[key] > 10:
          print(key, counts[key])
annie 42
jan 100

What will the following code print?: --------------------------------------------------------------------
  d = dict()
  d['quincy'] = 1
  d['beau'] = 5
  d['kris'] = 9
  for (k,i) in d.items():
      print(k, i)
quincy 1
beau 5
kris 9    
    
Which does the same thing as the following code?: ------------------------------------------------------
  lst = []
  for key, val in counts.items():
      newtup = (val, key)
      lst.append(newtup)
  lst = sorted(lst, reverse=True)
  print(lst)
  
print( sorted( [ (v,k) for k,v in counts.items() ], reverse=True ) )

Which regex matches only a white space character? ------------------------------------------------------
\s

What will the following program print?: ----------------------------------------------------------------
  import re
  s = 'A message from csev@umich.edu to cwen@iupui.edu about meeting @2PM'
  lst = re.findall('\\S+@\\S+', s)
  print(lst)

['csev@umich.edu', 'cwen@iupui.edu']

What will search for a "$" in a regular expression? ----------------------------------------------------
\$

Networking with Python - What Python library gives access to TCP Sockets? ------------------------------
socket

Networking Protocol - What type of HTTP request is usually used to access a website? -------------------
GET

Networking: Write a Web Browser --  What does the following code create?: ------------------------------
import socket

mysock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
mysock.connect(('data.pr4e.org', 80))
cmd = 'GET http://data.pr4e.org/romeo.txt HTTP/1.0\r\n\r\n'.encode()
mysock.send(cmd)

while True:
    data = mysock.recv(512)
    if len(data) < 1:
        break
    print(data.decode(),end='')
mysock.close()

Networking: Write a Web Browser - What does the following code create?: --------------------------------
  import socket

  mysock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
  mysock.connect(('data.pr4e.org', 80))
  cmd = 'GET http://data.pr4e.org/romeo.txt HTTP/1.0\r\n\r\n'.encode()
  mysock.send(cmd)

  while True:
      data = mysock.recv(512)
      if len(data) < 1:
          break
      print(data.decode(),end='')
  mysock.close()

A simple web browser.

Networking: Text Processing - Which type of encoding do most websites use? ----------------------------
UTF-8

Networking: Using urllib in Python - What will the output of the following code be like?: -------------
  import urllib.request
  fhand = urllib.request.urlopen('http://data.pr4e.org/romeo.txt')
  for line in fhand:
      print(line.decode().strip())
Just contents of "romeo.txt".

Networking: Web Scraping with Python - What Python library is used for parsing HTML documents and extracting data from HTML documents? ------------------------------------
BeautifulSoup

Using Web Services - What are the two most common ways to send data over the internet?
JSON and XML

Web Services: XML - What is wrong with the following XML?:
  <person>
    <name>Chuck</name>
    <phone type="intl">
      +1 734 303 4456
    <email hide="yes" />
  </person>

Phone tag is missing closing tag.

Web Services: XML Schema - What is XSD? -------------------------------------------------------------
The W3C Schema specification for XML.

Web Services: JSON - What will the following code print?: -------------------------------------------
  import json
  data = '''
    [
      { "id" : "001",
        "x" : "2",
       "name" : "Quincy"
      } ,
      { "id" : "009",
        "x" : "7",
        "name" : "Mrugesh"
      }
    ]
  '''
  info = json.loads(data)
  print(info[1]['name'])

Mrugesh

Web Services: Service Oriented Approach - With a services oriented approach to developing web apps, where is the data located? ----------------------------------------------
Spread across many computer systems connected via the internet or internal network.

Web Services: APIs - What does API stand for? -------------------------------------------------------
Application Program Interface

Web Services: API Rate Limiting and Security - When making a request from the Twitter API, what information must always be sent with the request? --------------------------
key

Python Objects - Which is NOT true about objects in Python? ----------------------------------------
Objects are one of the five standard data types.

Objects: A Sample Class - What will the following program print?: -----------------------------------
  class PartyAnimal:
      x = 0
      def party(self):
          self.x = self.x + 2
          print(self.x)

  an = PartyAnimal()
  an.party()
  an.party()
2
4

Object Lifecycle - What will the following program print?: -----------------------------------------
  class PartyAnimal:
      x = 0
      name = ''
      def __init__(self, nam):
          self.name = nam
          print(self.name,'constructed')
      def party(self):
          self.x = self.x + 1
          print(self.name,'party count',self.x)

  q = PartyAnimal('Quincy')
  m = PartyAnimal('Miya')

  q.party()
  m.party()
  q.party()

Quincy constructed
Miya constructed
Quincy party count 1
Miya party count 1
Quincy party count 2

Objects: Inheritance - What is inheritance in object-oriented programming? ------------------------
The ability to create a new class by extending an existing class.

Relational Databases and SQLite - Which is NOT a primary data structure in a database? ------------
index

Make a Relational Database - What SQL command would you use to retrieve all users that have the email address quincy@freecodecamp.org? --------------------------------------
SELECT * FROM Users WHERE email="quincy@freecodecamp.org"

Relational Database Design - What is the best practice for how many times a piece of string data should be stored in a database? --------------------------------------------
1

Representing Relationships in a Relational Database - What is a foreign key? ------------------------------------------------------------------------------------------------
A number that points to the primary key of an associated row in a different table.

Relational Databases: Relationship Building - What does the INSERT command do in SQL? ---------------------------------------------------------------------------------------
It defines a new row by listing the fields we want to include followed by the values we want placed in the new row.































Python for Everybody Database Handout

https://www.py4e.com/lectures3/Pythonlearn-15-Database-Handout.txt

Download and Install: http://sqlitebrowser.org/

Single Table SQL

CREATE TABLE "Users" ("name" TEXT, "email" TEXT)

INSERT INTO Users (name, email) VALUES ('Chuck', 'csev@umich.edu')
INSERT INTO Users (name, email) VALUES ('Colleen', 'cvl@umich.edu')
INSERT INTO Users (name, email) VALUES ('Ted', 'ted@umich.edu')
INSERT INTO Users (name, email) VALUES ('Sally', 'a1@umich.edu')
INSERT INTO Users (name, email) VALUES ('Ted', 'ted@umich.edu')
INSERT INTO Users (name, email) VALUES ('Kristen', 'kf@umich.edu')

DELETE FROM Users WHERE email='ted@umich.edu'

UPDATE Users SET name="Charles" WHERE email='csev@umich.edu'

SELECT * FROM Users

SELECT * FROM Users WHERE email='csev@umich.edu'

SELECT * FROM Users ORDER BY email

SELECT * FROM Users ORDER BY name DESC

Multi-Table SQL:

CREATE TABLE "Artist" (
    "id" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL UNIQUE, 
    "name" TEXT)

CREATE TABLE "Album" (
    "id" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL UNIQUE, 
    artist_id INTEGER,
    "title" TEXT)

CREATE TABLE "Genre" (
    "id" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL UNIQUE, 
    "name" TEXT)

CREATE TABLE "Track" (
    "id" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL UNIQUE, 
    album_id INTEGER, genre_id INTEGER, len INTEGER, rating INTEGER, 
    "title" TEXT, "count" INTEGER)

INSERT INTO Artist (name) VALUES ('Led Zepplin')
INSERT INTO Artist (name) VALUES ('AC/DC')

INSERT INTO Genre (name) VALUES ('Rock') ;
INSERT INTO Genre (name) VALUES ('Metal');

INSERT INTO Album (title, artist_id) VALUES ('Who Made Who', 2);
INSERT INTO Album (title, artist_id) VALUES ('IV', 1);

INSERT INTO Track (title, rating, len, count, album_id, genre_id) 
    VALUES ('Black Dog', 5, 297, 0, 2, 1) ;
INSERT INTO Track (title, rating, len, count, album_id, genre_id) 
    VALUES ('Stairway', 5, 482, 0, 2, 1) ;
INSERT INTO Track (title, rating, len, count, album_id, genre_id) 
    VALUES ('About to Rock', 5, 313, 0, 1, 2) ;
INSERT INTO Track (title, rating, len, count, album_id, genre_id) 
    VALUES ('Who Made Who', 5, 207, 0, 1, 2) ;

SELECT Album.title, Artist.name FROM Album JOIN Artist 
    ON Album.artist_id = Artist.id

SELECT Album.title, Album.artist_id, Artist.id, Artist.name 
    FROM Album JOIN Artist ON Album.artist_id = Artist.id

SELECT Track.title, Track.genre_id, Genre.id, Genre.name 
    FROM Track JOIN Genre   

SELECT Track.title, Genre.name FROM Track JOIN Genre 
    ON Track.genre_id = Genre.id

SELECT Track.title, Artist.name, Album.title, Genre.name 
FROM Track JOIN Genre JOIN Album JOIN Artist 
    ON Track.genre_id = Genre.id AND Track.album_id = Album.id 
    AND Album.artist_id = Artist.id
 

Many-Many Relationship

CREATE TABLE User (
    id     INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT UNIQUE,
    name   TEXT UNIQUE,
    email  TEXT
) ;

CREATE TABLE Course (
    id     INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT UNIQUE,
    title  TEXT UNIQUE
) ;

CREATE TABLE Member (
    user_id     INTEGER,
    course_id   INTEGER,
	role        INTEGER,
    PRIMARY KEY (user_id, course_id)
) ;

INSERT INTO User (name, email) VALUES ('Jane', 'jane@tsugi.org');
INSERT INTO User (name, email) VALUES ('Ed', 'ed@tsugi.org');
INSERT INTO User (name, email) VALUES ('Sue', 'sue@tsugi.org');

INSERT INTO Course (title) VALUES ('Python');
INSERT INTO Course (title) VALUES ('SQL');
INSERT INTO Course (title) VALUES ('PHP');

INSERT INTO Member (user_id, course_id, role) VALUES (1, 1, 1);
INSERT INTO Member (user_id, course_id, role) VALUES (2, 1, 0);
INSERT INTO Member (user_id, course_id, role) VALUES (3, 1, 0);

INSERT INTO Member (user_id, course_id, role) VALUES (1, 2, 0);
INSERT INTO Member (user_id, course_id, role) VALUES (2, 2, 1);

INSERT INTO Member (user_id, course_id, role) VALUES (2, 3, 1);
INSERT INTO Member (user_id, course_id, role) VALUES (3, 3, 0);

SELECT User.name, Member.role, Course.title
  FROM User JOIN Member JOIN Course
  ON Member.user_id = User.id AND Member.course_id = Course.id
  ORDER BY Course.title, Member.role DESC, User.name 












