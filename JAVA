JavaScript Algorithms and Data Structures

Escape Sequences in Strings:
const myStr = "FirstLine\n\t\\SecondLine\nThirdLine";

Concatenating Strings with Plus Operator:
const myStr = "This is the start. "+"This is the end.";

Concatenating Strings with the Plus Equals Operator:
let myStr = "This is the first sentence. ";
myStr += "This is the second sentence."

Constructing Strings with Variables:
const myName = "Rik";
const myStr = "My name is " + myName + " and I am well!";

Appending Variables to Strings:
const someAdjective = "the bomb";
let myStr = "Learning to code is ";
myStr += someAdjective;

Find the Length of a String:
lastNameLength = lastName.length;

Use Bracket Notation to Find the First Character in a String:
firstLetterOfLastName = lastName[0]; // Change this line

Understand String Immutability:
myStr = "Hello World";

Use Bracket Notation to Find the Nth Character in a String:
const thirdLetterOfLastName = lastName[2];

Use Bracket Notation to Find the Last Character in a String:
const lastLetterOfLastName = lastName[lastName.length - 1];

Use Bracket Notation to Find the Nth-to-Last Character in a String:
const secondToLastLetterOfLastName = lastName[lastName.length -2];

Word Blanks:
const wordBlanks = "My " + myAdjective + " " + myNoun + " " + myVerb + " " + myAdverb + ".";

Store Multiple Values in one Variable using JavaScript Arrays
const myArray = ["The number is ", + "7"];

Nest one Array within Another Array 
const myArray = [["Bulls", 23], ["White Sox", 45]];

Access Array Data with Indexes:
const myArray = [50, 60, 70];
const myData = myArray[0];

Modify Array Data With Indexes:
const myArray = [18, 64, 99];
myArray[0] = 45;

Access Multi-Dimensional Arrays With Indexes:
const myArray = [
  [1, 2, 3],
  [4, 5, 6],
  [7, 8, 9],
  [[10, 11, 12], 13, 14],
];
const myData = myArray[0][0];
https://www.youtube.com/watch?v=3zUVQZc4XDc

Access Multi-Dimensional Arrays With Indexes:
const myData = myArray [2] + [1];

Manipulate Arrays With push():
const myArray = [["John", 23], ["cat", 2], ["dog", 3]];

Manipulate Arrays With pop():
const removedFromMyArray = myArray.pop();

Manipulate Arrays With shift():
const myArray = [["John", 23], ["dog", 3]];
const removedFromMyArray = myArray.shift();

Manipulate Arrays With unshift():
const myArray = [["John", 23], ["dog", 3]];
myArray.shift();
myArray.unshift(["Paul", 35]);

**********  1. pop removes from end of array, 2. shift removes from front of array, 3. unshift adds to front of array, 4. push adds to end of array

Shopping List
const myList = [["Chocolate Bar", 15], ["Steak", 3], ["Rice", 1], ["Salt", 1], ["Ice Cream", 2]];

Write Reusable JavaScript with Functions:
function reusableFunction() {
  console.log("Hi World");
}
reusableFunction();

Passing Values to Functions with Arguments:
// Example
function ourFunctionWithArgs(a, b) {
  console.log(a, b);
}

function testFun(param1, param2) {
  console.log(param1, param2);
}

testFun("3", "16");

// Only change code below this line.

function functionWithArgs(one, two) {
  console.log(one + two);
}

functionWithArgs(22,2);

Return a Value from a Function with Return:
function timesFive(num) {
  return num * 5;
}

console.log(timesFive(5));
console.log(timesFive(2));
console.log(timesFive(0));

Global Scope and Functions:
// Declare the myGlobal variable below this line
const myGlobal = 10;

function fun1() {
  // Assign 5 to oopsGlobal here
oopsGlobal = 5;
}

// Only change code above this line

function fun2() {
  let output = "";
  if (typeof myGlobal != "undefined") {
    output += "myGlobal: " + myGlobal;
  }
  if (typeof oopsGlobal != "undefined") {
    output += " oopsGlobal: " + oopsGlobal;
  }
  console.log(output);
}

Local Scope and Functions:
function myLocalScope() {
  // Only change code below this line
const myVar = "G'day mate";
  console.log('inside myLocalScope', myVar);
}
myLocalScope();

// Run and check the console
// myVar is not defined outside of myLocalScope
//console.log('outside myLocalScope', myVar);


