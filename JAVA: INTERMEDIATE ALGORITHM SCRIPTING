INTERMEDIATE ALGORITHM SCRIPTING

Sum All Numbers in a Range:
function sumAll(arr) {
  let minimumNumber = Math.min(arr[0], arr[1]);
  let maximumNumber = Math.max(arr[0], arr[1]);
  var result = 0;
    for (var i = minimumNumber; i <= maximumNumber; i += 1) {
      result += i;
  }
  return result;
}
sumAll([1, 4]);

Diff Two Arrays:
function diffArray(arr1, arr2) {
  const newArr = [];
    for (let i = 0; i < arr1.length; i += 1) {
      if (arr2.indexOf(arr1[i]) === -1) {
        newArr.push(arr1[i]);
      }
    }
  for (let j = 0; j < arr2.length; j += 1) {
    if(arr1.indexOf(arr2[j]) === -1) {
      newArr.push(arr2[j]);
    }
  }
  return newArr;
}
console.log(diffArray(["diorite", "andesite", "grass", "dirt", "pink wool", "dead shrub"], ["diorite", "andesite", "grass", "dirt", "dead shrub"]));

Seek and Destroy:
function destroyer(arr) {
  let survivingElements = [];
  let battleField = Object.values(arguments)[0];
  
  Convert HTML Entities:
  function convertHTML(str) {
  return str;
}
convertHTML("Dolce & Gabbana");
  let elementsToDestroy = Object.values(arguments).splice(1);

  for (let i = 0; i < battleField.length; i += 1) {
    let positionToRecon = battleField[i];
    if (elementsToDestroy.indexOf(positionToRecon) === -1) {
      survivingElements.push(positionToRecon);
    }
  }
  return survivingElements;
}
let result = destroyer([1, 2, 3, 1, 2, 3], 2, 3);

Wherefore art thou:
function whatIsInAName(collections, source) {
  var arr = [];
  collections.forEach(collection => {
    let index = 0;
    for (let key in source) {
      console.log(key, collection, source)
      if (collection[key] === source[key]) {
        index += 1;
      }
      if (index === Object.keys(source).length) {
        arr.push(collection);
      }
    }
  });
  return arr;
}
whatIsInAName([{ first: "Romeo", last: "Montague" }, { first: "Mercutio", last: null }, { first: "Tybalt", last: "Capulet" }], { last: "Capulet" });

Spinal Tap Case:
    FIRST SOLUTION
function spinalCase(str) {
  let camelCaseHandled = str.replace(/([a-z])([A_Z])/g, "$1 $2");
  let spacesAndDashedHandled = camelCaseHandled.replace(/\s|_/g, "-");
  return spacesAndDashedHandled.toLowerCase();
}
let result = spinalCase('thisIsSpinalTap');
console.log(result);

    SECOND SOLUTION
function spinalCase(str) {
  return str.replace(/\s|_/g, "-").replace(/([a-z])([A_Z])/g, "$1-$2").toLowerCase();
}
console.log(spinalCase('This Is Spinal Tap'));

    THIRD SOLUTION
function spinalCase(str) {
  return str
    .split(/\s|_|(?=[A_Z])/)
    .join("-")
    .toLowerCase();
}
spinalCase('This Is Spinal Tap');

    FOURTH SOLUTION 
function spinalCase(str) {
  str = str.replace(/([a-z])([A-Z])/g, "$1 $2");
  return str
  .toLowerCase()
  .split(/(?:_| )+/)
  .join("-");
}
spinalCase('This Is Spinal Tap');

Pig Latin:
function translatePigLatin(str) {
  let vowels = "aeiou".split("");
  for (let i = 0; i < str.length; i += 1) {
    let individualLetter = str[i];
    if (vowels.indexOf(individualLetter) != -1 && i === 0) {
      return str + "way";
    }    
    if (vowels.indexOf(individualLetter) != -1) {
      return str.slice(i) + str.slice(0, i) + "ay";
    }
  }
  return str + "ay";
}
let result = translatePigLatin("rhythm");

Search and Replace:
function myReplace(str, before, after) {
  let stringCollection = str.split(" ");
  for (let i = 0; i < stringCollection.length; i += 1) {
    if (stringCollection[i] === before) {
      if (stringCollection[i] [0] === stringCollection[i][0].toUpperCase()) {
        after = after[0].toUpperCase() + after.slice(1);
      };
      stringCollection[i] = after;
    }
  }
  return stringCollection.join(" ");
}
let result = myReplace("I think we should look up there", "up", "Down");
console.log(result);

DNA Pairing:
function pairElement(str) {
  const matchWithBasePair = function(char) {
    switch (char) {
      case "A":
        return ["A", "T"];
      case "T":
        return ["T", "A"];
      case "C":
        return ["C", "G"];
      case "G":
        return ["G", "C"];
    }
  };
  const pairs = [];
  for (let i = 0; i < str.length; i++) {
    pairs.push(matchWithBasePair(str[i]));
  }
  return pairs;
}
pairElement("GCG");

Missing letters:
function fearNotLetter(str) {
  for (let i = 1; i < str.length; ++i) {
    if (str.charCodeAt(i) - str.charCodeAt(i - 1) > 1) {
      return String.fromCharCode(str.charCodeAt(i - 1) + 1);
    }
  }
}

Sorted Union:
function uniteUnique() {
  return [...arguments]
    .flat()
    .filter((item, ind, arr) => arr.indexOf(item) === ind);
}
uniteUnique([1, 3, 2], [5, 2, 1, 4], [2, 1]);
