// http://127.0.0.1:5500/

// FRONT END DEV:  Project 3 COMPLETED March 09, 2023

<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" integrity="sha384-rbsA2VBKQhggwzxH7pPCaAqO46MgnOM80zW1RWuH61DGLwZJEdK2Kadq2F9CUG65" crossorigin="anonymous" />
        <script crossorigin src="https://unpkg.com/react@18/umd/react.development.js"></script>
        <script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
        <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
        <title>Drum Machine</title>
    </head>
    <body>
        <div id="root"></div>
        <script type="text/babel" src="./index.js"></script>
    </body>
</html>

-------------------------- JAVA ------------------------------------

const audioClips = [
    {
        keyCode: 81,
        keyTrigger: "Q",
        id: "Heater-1",
        url: "https://s3.amazonaws.com/freecodecamp/drums/Heater-1.mp3"
    }, {
        keyCode: 87,
        keyTrigger: "W",
        id: "Heater-2",
        url: "https://s3.amazonaws.com/freecodecamp/drums/Heater-2.mp3"
    }, {
        keyCode: 69,
        keyTrigger: "E",
        id: "Heater-3",
        url: "https://s3.amazonaws.com/freecodecamp/drums/Heater-3.mp3"
    }, {
        keyCode: 65,
        keyTrigger: "A",
        id: "Heater-4",
        url: "https://s3.amazonaws.com/freecodecamp/drums/Heater-4_1.mp3"
    }, {
        keyCode: 83,
        keyTrigger: "S",
        id: "Clap",
        url: "https://s3.amazonaws.com/freecodecamp/drums/Heater-6.mp3"
    }, {
        keyCode: 68,
        keyTrigger: "D",
        id: "Open-HH",
        url: "https://s3.amazonaws.com/freecodecamp/drums/Dsc_Oh.mp3"
    }, {
        keyCode: 90,
        keyTrigger: "Z",
        id: "Kick-n'-Hat",
        url: "https://s3.amazonaws.com/freecodecamp/drums/Kick_n_Hat.mp3"
    }, {
        keyCode: 88,
        keyTrigger: "X",
        id: "Kick",
        url: "https://s3.amazonaws.com/freecodecamp/drums/RP4_KICK_1.mp3"
    }, {
        keyCode: 67,
        keyTrigger: "C",
        id: "Closed-HH",
        url: "https://s3.amazonaws.com/freecodecamp/drums/Cev_H2.mp3"
    }]
      , d = [{
        keyCode: 81,
        keyTrigger: "Q",
        id: "Chord-1",
        url: "https://s3.amazonaws.com/freecodecamp/drums/Chord_1.mp3"
    }, {
        keyCode: 87,
        keyTrigger: "W",
        id: "Chord-2",
        url: "https://s3.amazonaws.com/freecodecamp/drums/Chord_2.mp3"
    }, {
        keyCode: 69,
        keyTrigger: "E",
        id: "Chord-3",
        url: "https://s3.amazonaws.com/freecodecamp/drums/Chord_3.mp3"
    }, {
        keyCode: 65,
        keyTrigger: "A",
        id: "Shaker",
        url: "https://s3.amazonaws.com/freecodecamp/drums/Give_us_a_light.mp3"
    }, {
        keyCode: 83,
        keyTrigger: "S",
        id: "Open-HH",
        url: "https://s3.amazonaws.com/freecodecamp/drums/Dry_Ohh.mp3"
    }, {
        keyCode: 68,
        keyTrigger: "D",
        id: "Closed-HH",
        url: "https://s3.amazonaws.com/freecodecamp/drums/Bld_H1.mp3"
    }, {
        keyCode: 90,
        keyTrigger: "Z",
        id: "Punchy-Kick",
        url: "https://s3.amazonaws.com/freecodecamp/drums/punchy_kick_1.mp3"
    }, {
        keyCode: 88,
        keyTrigger: "X",
        id: "Side-Stick",
        url: "https://s3.amazonaws.com/freecodecamp/drums/side_stick_1.mp3"
    }, {
        keyCode: 67,
        keyTrigger: "C",
        id: "Snare",
        url: "https://s3.amazonaws.com/freecodecamp/drums/Brk_Snr.mp3"
    }
];
      
function App(){
    const [volume, setVolume] = React.useState(1);
    const [recording, setRecording] = React.useState("");
    const [speed, setSpeed] = React.useState(0.5);
    
    const playRecording = () => {
      let index = 0;
      let recordArray = recording.split(" ");
      const interval = setInterval(()=>{
          const audioTag = document.getElementById(recordArray[index]);
          audioTag.volume = volume;
          audioTag.currentTime = 0;
          audioTag.play();
          index++;
      }, speed * 600);
      setTimeout(
        () => clearInterval(interval),
        600 * speed * recordArray.length - 1
      );
    };
    return (
        <div className="bg-info min-vh-100 text-white">
            <div className="text-center">
                <br></br>
                <br></br>
                <br></br>
                <h2>Test of Mettle Drum Machine</h2>
                {audioClips.map((clip) => (
                    <Pad key={clip.id} clip={clip} volume={volume} setRecording={setRecording} />
                ))}
                <br/>
                <h4>Volume</h4>
                <input 
                    type="range" 
                    step="0.01" 
                    onChange={(e) => setVolume(e.target.value)} 
                    value={volume} 
                    max="1" 
                    min="0" 
                    className="w-50" 
                />
                <h3>{recording}</h3>
                {recording && (
                    <>
                        <button onClick={playRecording} className="btn btn-success">play</button>
                        <button onClick={() => setRecording("")} className="btn btn-danger">clear</button>
                        <br></br>
                        <h4>Speed</h4>
                        <input 
                            type="range" 
                            step="0.01" 
                            onChange={(e) => setSpeed(e.target.value)} 
                            value={speed} 
                            max="1.2" 
                            min="0.1" 
                            className="w-50" 
                        />
                    </>
                )}
            </div>
        </div>
    );
}

function Pad({ clip, volume, setRecording }) {
    const [active, setActive] = React.useState(false);
    
    React.useEffect(() => {
        document.addEventListener("keydown", handleKeyPress);
        return () => {
            document.removeEventListener("keydown", handleKeyPress);
        };
    }, []);

    const handleKeyPress = (e) => {
        if (e.keyCode === clip.keyCode) {
            playSound();
        }
    };

    const playSound = () => {
        const audioTag = document.getElementById(clip.keyTrigger);
        setActive(true);
        setTimeout(() => setActive(false), 200);
        audioTag.volume = volume;
        audioTag.currentTime = 0;
        audioTag.play();
        setRecording((prev) => prev + clip.keyTrigger + " ");
    };

    return (
        <div 
            onClick={playSound}
            className={`btn btn-secondary p-4 m-3 ${active && "btn-warning"}`}
        >
            <audio className="clip" id={clip.keyTrigger} src={clip.url} />
            {clip.keyTrigger}
        </div>
    );
}

ReactDOM.render(<App />, document.getElementById('root'));



