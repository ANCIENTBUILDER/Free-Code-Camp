JAVA: FUNCTIONAL PROGRAMMING

Learn About Functional Programming:
const tea4TeamFCC = getTea(40);

Understand Functional Programming Terminology:
const tea4GreenTeamFCC = getTea(prepareGreenTea, 27);
const tea4BlackTeamFCC = getTea(prepareBlackTea, 13);

Understand the Hazards of Using Imperative Code:
  const tabsBeforeIndex = this.tabs.slice(0, index); // Get the tabs before the tab
  const tabsAfterIndex = this.tabs.slice(index + 1); // Get the tabs after the tab
  this.tabs = tabsBeforeIndex.concat(tabsAfterIndex); // Join them together

Avoid Mutations and Side Effects Using Functional Programming:
return fixedValue +1;

Pass Arguments to Avoid External Dependence in a Function:
function incrementer (valueToIncrement) {
  return valueToIncrement + 1;

Refactor Global Variables Out of Functions:
// The global variable
const bookList = ["The Hound of the Baskervilles", "On The Electrodynamics of Moving Bodies", "PhilosophiÃ¦ Naturalis Principia Mathematica", "Disquisitiones Arithmeticae"];
// Change code below this line
function add(originalBookList, bookName) {
  let newBookList = [...originalBookList];
  newBookList.push(bookName);
  return newBookList;
  // Change code above this line
}
// Change code below this line
function remove(originalBookList, bookName) {
  const book_index = originalBookList.indexOf(bookName);
  if (book_index >= 0) {
    let newBookList = [...originalBookList];
    newBookList.splice(book_index, 1);
      return newBookList;
    // Change code above this line
    }
}

Use the map Method to Extract Data from an Array:

let ratings = watchList.map(movie => {
  let refinedMovieData = {};
    refinedMovieData["title"] = movie["Title"];
    refinedMovieData["rating"] = movie["imdbRating"];
      return refinedMovieData;
})

Implement map on a Prototype:
for (let i = 0; i < this.length; i++) {
    newArray.push(callback(this[i], i, this));
  }

Use the filter Method to Extract Data from an Array:
const filteredList = watchList.map(function(individualMovie) {
  let refinedMovieData = {};
  refinedMovieData.title = individualMovie.Title;
  refinedMovieData.rating = individualMovie.imdbRating;
  return refinedMovieData;
}).filter(function(individualMovie) {
  let ratingInteger = parseFloat(individualMovie.rating);
  if (ratingInteger >= 8.0) {
    return individualMovie;
  }
});

Implement the filter Method on a Prototype:
for (let i = 0; i < this.length; i++) {
    if (Boolean(callback(this[i], i, this)) === true) {
      newArray.push(this[i]);
    }
  }

Return Part of an Array Using the slice Method:
let slicedResult = anim.slice(beginSlice, endSlice);
return slicedResult;

Remove Elements from an Array Using slice Instead of splice:
  return cities.slice(0, 3);

Combine Two Arrays Using the concat Method:
return original.concat(attach);

Add Elements to the End of an Array Using concat Instead of push:
  return original.concat(newItem);

Use the reduce Method to Analyze Data:
const averageRating = watchList
    // Use filter to find films directed by Christopher Nolan
    .filter(film => film.Director === "Christopher Nolan")
    // Use map to convert their ratings from strings to numbers
    .map(film => Number(film.imdbRating))
    // Use reduce to add together their ratings
    .reduce((sumOfRatings, rating) => sumOfRatings + rating) /
  // Divide by the number of Nolan films to get the average rating
  watchList.filter(film => film.Director === "Christopher Nolan").length;

Use Higher-Order Functions map, filter, or reduce to Solve a Complex Problem:
let result = [];
let positiveIntegersSquared = arr.filter(function(num) {
  if (Number.isInteger(num) && num > 0) {
    return num;
  }
}).map(function(num) {
  return num * num;
});
  return positiveIntegersSquared;

Sort an Array Alphabetically using the sort Method:
  return arr.sort(function(a, b) {
    return a === b ? 0 : a < b ? -1 : 1;
  });

Return a Sorted Array Without Changing the Original Array:
return [].concat(arr).sort(function(a, b) {
  return a - b;
});

Split a String into an Array Using the split Method:
return str.split(/\W/)

Combine an Array into a String Using the join Method:
function sentensify(str) {
  // Only change code below this line


  // Only change code above this line
}

sentensify("May-the-force-be-with-you");
