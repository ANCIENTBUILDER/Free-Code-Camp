JAVA: FUNCTIONAL PROGRAMMING

Learn About Functional Programming:
const tea4TeamFCC = getTea(40);

Understand Functional Programming Terminology:
const tea4GreenTeamFCC = getTea(prepareGreenTea, 27);
const tea4BlackTeamFCC = getTea(prepareBlackTea, 13);

Understand the Hazards of Using Imperative Code:
  const tabsBeforeIndex = this.tabs.slice(0, index); // Get the tabs before the tab
  const tabsAfterIndex = this.tabs.slice(index + 1); // Get the tabs after the tab
  this.tabs = tabsBeforeIndex.concat(tabsAfterIndex); // Join them together

Avoid Mutations and Side Effects Using Functional Programming:
return fixedValue +1;

Pass Arguments to Avoid External Dependence in a Function:
function incrementer (valueToIncrement) {
  return valueToIncrement + 1;

Refactor Global Variables Out of Functions:
// The global variable
const bookList = ["The Hound of the Baskervilles", "On The Electrodynamics of Moving Bodies", "PhilosophiÃ¦ Naturalis Principia Mathematica", "Disquisitiones Arithmeticae"];
// Change code below this line
function add(originalBookList, bookName) {
  let newBookList = [...originalBookList];
  newBookList.push(bookName);
  return newBookList;
  // Change code above this line
}
// Change code below this line
function remove(originalBookList, bookName) {
  const book_index = originalBookList.indexOf(bookName);
  if (book_index >= 0) {
    let newBookList = [...originalBookList];
    newBookList.splice(book_index, 1);
      return newBookList;
    // Change code above this line
    }
}

Use the map Method to Extract Data from an Array:

let ratings = watchList.map(movie => {
  let refinedMovieData = {};
    refinedMovieData["title"] = movie["Title"];
    refinedMovieData["rating"] = movie["imdbRating"];
      return refinedMovieData;
})

Implement map on a Prototype:
for (let i = 0; i < this.length; i++) {
    newArray.push(callback(this[i], i, this));
  }

Use the filter Method to Extract Data from an Array:
const filteredList = watchList.map(function(individualMovie) {
  let refinedMovieData = {};
  refinedMovieData.title = individualMovie.Title;
  refinedMovieData.rating = individualMovie.imdbRating;
  return refinedMovieData;
}).filter(function(individualMovie) {
  let ratingInteger = parseFloat(individualMovie.rating);
  if (ratingInteger >= 8.0) {
    return individualMovie;
  }
});

Implement the filter Method on a Prototype:
for (let i = 0; i < this.length; i++) {
    if (Boolean(callback(this[i], i, this)) === true) {
      newArray.push(this[i]);
    }
  }
