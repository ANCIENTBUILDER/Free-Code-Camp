<!Doctype html>
  <html>
    <head>
      <link rel="stylesheet" href="styles.css" />
    </head>
    <body>
      <nav id="navbar">
        <header>Test of Mettle Documentation</header>
        <ul>
          <li><a class="nav-link" href="#Introduction">Introduction</a></li>
          <li><a class="nav-link" href="#What You Should Already Know">What You Should Already Know</a></li>
          <li><a class="nav-link" href="#ATOM App & Video Game">ATOM App & Video Game</a></li>
          <li><a class="nav-link" href="#Purpose & Need">Purpose & Need</a></li>
          <li><a class="nav-link" href="#Variables">Variables</a></li>
          <li><a class="nav-link" href="#Declaring Variables">Declaring Variables</a></li>
          <li><a class="nav-link" href="#Variable Scope">Variable Scope</a></li>
          <li><a class="nav-link" href="#Global Variables">Global Variables</a></li>
          <li><a class="nav-link" href="#Constants">Constants</a></li>
          <li><a class="nav-link" href="#Data Types">Data Types</a></li>
          <li><a class="nav-link" href="#If...Else Statement">If...Else Statement</a></li>
          <li><a class="nav-link" href="#While Statement">While Statement</a></li>
          <li><a class="nav-link" href="#Function Declarations">Function Declarations</a></li>
          <li><a class="nav-link" href="#Reference">Reference</a></li>
        </ul>
        </nav>
        <main id="main-doc">
          <section class="main-section" id="Introduction">
            <header>Introduction</header>
            <article>
              <p>Test of Mettle is virtual and physical cross platform training and competition. It operates on any mobile phone, tablet, PC, or laptop and can be accessed by anyone. It operates on both digital and analog to ensure seamless operations of the entire platform and system. The Test of Mettle App is known as ATOM.</p>
              <p>The draw is that members are paid a wage to train and compete in Test of Mettle experiences both in the virtual world of the video game, and to compete at any physical Test of Mettle Host Site.</p>
            <ul>
              <li>Virtual World</li>
              <li>Physical World</li>
            </ul>
          </article>
      </section>
      <section class="main-section" id="What You Should Already Know">
        <header>What You Should Already Know</header>
        <article>
              <p>Test of Mettle is a new type of training platform that begins in the virtual world, then draws you into the physical world, learning real world skills along the way that lead to an upgraded and improved version of the member.</p>
              <ul>
                <li>A general understanding of the internet and the World Wide Web</li>
                <li>A good working knowledge of HyperText Markup Language (HTML)</li>
                <li>Some basic programming experience. If you are new to programming, try one of the tutorials linked on the main page about.</li>
                </ul>
                </article>
      </section>
           <section class="main-section" id="Test of Mettle App & Video Game">
             <header>Test of Mettle App & Video Game</header>
             <article>
              <p>The United Nations and the WEF have identified that climate change and the international job crisis are two of the most serious threats to civilization. BIOSPHERE Resorts and the Test of Mettle are member owned rapidly deployable solutions.</p>
              <p>Test of Mettle experiences are standard, however, Test of Mettle Host Sites offer slight variables such as; location, weather, services, etc.</p>
              <p>Earn to play and travel to play, this video game is a solution to the international job crisis.</p>
            </article>
           <section class="main-section" id="Purpose & Need">
             <header>Purpose & Need</header>
             <article>
               <p>To get started with the Test of Mettle, download the app and write your first "Hello World" Javascript Code:</p>
               <code>function greetMe(Erik) { alert("Hello " + yourName);}greetMe("World");</code>

               <p>Select the code in the pad and hit the Ctrl+R to watch it unfold in your browser!</p>
               </article>
           <section class="main-section" id="Variables">
             <header>Variables</header>
             <p>Variables are used as symbolic names for values in your application. The names of variables, called identifiers, conform to certain rules.</p>
             <p>A JavaScript identifier must start with a letter, underscore(_), or dollar sign ($); subsequent characters can also be digits (0-9). JavaScript is case sensitive.</p>
           </section>
           <section class="main-section" id="Declaring Variables">
             <header>Declaring Variables</header>
             <article><p>You can declare a variable in three ways:</p>
             <p>Variables are used as symbolic names for values in your application. The names of variables, called identifiers, conform to certain rules.</p>
             <p>A JavaScript identifier must start with a letter, underscore(_), or dollar sign ($); subsequent characters can also be digits (0-9). JavaScript is case sensitive.</p>
             </article>
           </section>
           <section class="main-section" id="Variable Scope">
             <header>Variable Scope</header>
             <article> 
             <p>When you declare a variable outside of any function, it is called a global variable, because it is available to any other code in the current document. When you declare a variable within a function, it is called a local variable, because it is available only within that function.</p>
             <p>A JavaScript identifier must start with a letter, underscore(_), or dollar sign ($); subsequent characters can also be digits (0-9). JavaScript is case sensitive.</p>
             <code>if (true) { var x = 5 } console.log(x); // 5</code>
             <p>This behavior changes, when using the let declaration introduced in ECMAScript 2015.</p>
             <code>if (true) { let y = 5; } console.log(y); // ReferenceError: y is not defined</code>
             </article>
           </section>
           <section class="main-section" id="Global_variables">
             <header>Global Variables</header>
             <article>
               <p>Global variables are in fact properties of the global object. In web pages the global object is window, so you can set and access global variables using the window.variable syntax.</p>
               <p>Consequently, you can access global variables declared in one window or frame from another window or frame by specifying the window or frame name. For example, if a variable called phoneNumber is declared in a document, you can refer to this variable from an iframe as parent.phoneNumber.</p>
             </article>
          </section>
          <section class="main-section" id="Constants">
            <header>Constants</header>
            <article>
              <p>You can create a read-only, named constant with the const keyword. The syntax of a constant identifier is the same as for a variable identifier: it must start with a letter, underscore or dollar sign and can contain alphabetic, numeric, or underscore characters.</p>
              <code>const PI = 3.14;</code>
              <p>A constant cannot change value through assignment or be re-declared while the script is running. It has to be initialized to a value.</p>
              <p>The scope rules for constants are the same as those for let block scope variables. If the const keyword is omitted, the identifier is assumed to represent a variable.</p>
              <p>You cannot declare a constant with the same name as a function or variable in the same scope. For example:</p>
              <code>// THIS WILL CAUSE AN ERROR function f() {}; const f = 5; //THIS WILL CAUSE AN ERROR ALSO function f() { const g = 5; var g; //statements }</code>
              <p>However, object attributes are not protected, so the following statement is executed without problems.</p>
              <code>const MY_OBJECT = {"key": "value"}; MY_OBJECT.key = "otherValue";</code>
              <p></p>
            </article>
          </section>
          <section class="main-section" id="Data_types">
            <header>Data Types</header>
            <article>
              <p>The latest ECMAScript standard defines seven data types:</p>
              <ul>
                <li>
                  <p>Six data types that are primitives:</p>
                <ul>
                  <li>Boolean. true and false.</li>
                  <li>null. A special keyword denoting a null value. Because JavaScript is case-sensitive, null is not the same as Null, NULL, or any other variant.</li>
                  <li>undefined. A top-level property whose value is undefined.</li>
                  <li>Number. 42 or 3.14159.</li>
                  <li>String. "Howdy"</li>
                  <li>Symbol (new in ECMAScript 2015). A data type whose instances are unique and immutable.</li>
              </ul>
              </li>
              <li>and Object</li>
            </ul>
            <p>Although these data types are a relatively small amount, they enable you to perform useful functions with your applications. Objects and functions are the other fundamental elements in the language. You can think of objects as named containers for values, and functions as procedures that your application can perform.</p>
            </article>
          </section>
          <section class="main-section" id="if...else_statement">
            <header>if...else statement</header>
            <article>
          <p>Use the if statement to execute a statement if a logical condition is true. Use the optional else clause to execute a statement if the condition is false. An if statement looks as follows:</p>
          <code>if (condition) { statement_1; } else { statement_2; }</code>
          <p>condition can be any expression that evaluates to true or false. See Boolean for an explanation of what evaluates to true and false. If condition evaluates to true, statement_1 is executed; otherwise, statement_2 is executed. statement_1 and statement_2 can be any statement, including further nested if statements.</p>
          <p>You may also compound the statements using else if to have multiple conditions tested in sequence, as follows:</p>
          <code>if (condition_1) { statement_1; } else if (condition_2) { statement_2; } else if (condition_n) { statement_n; } else { statement_last; }</code>
          <p>In the case of multiple conditions only the first logical condition which evaluates to true will be executed. To execute multiple statements, group them within a block statement ({ ... }) . In general, it's good practice to always use block statements, especially when nesting if statements:</p>
          <code>if (condition) { statement_1_runs_if_condition_is_true; statement_2_runs_if_condition_is_true; } else { statement_3_runs_if_condition_is_false;
statement_4_runs_if_condition_is_false; }</code>
          <p>It is advisable to not use simple assignments in a conditional
          expression, because the assignment can be confused with equality when
          glancing over the code. For example, do not use the following code:</p>
          <code>if (x = y) { /* statements here */ }</code> 
          <p>If you need to use an assignment in a conditional expression, a common practice is to put additional parentheses around the assignment. For example:</p>
          <code>if ((x = y)) { /* statements here */ }</code>
        </article>
      </section>
      <section class="main-section" id="while_statement">
        <header>while statement</header>
        <article>
          <p>A while statement executes its statements as long as a specified condition evaluates to true. A while statement looks as follows:</p>

          <code>while (condition) statement</code> 
          <p>If the condition becomes false, statement within the loop stops executing and control passes to the statement following the loop.</p>
          <p>The condition test occurs before statement in the loop is executed. If the condition returns true, statement is executed and the condition is tested again. If the condition returns false, execution stops and control is passed to the statement following while.</p>
          <p>To execute multiple statements, use a block statement ({ ... }) to group those statements.</p>
          <p>Example:</p>
          <p>The following while loop iterates as long as n is less than three:</p>
          <code>var n = 0; var x = 0; while (n &lt; 3) { n++; x += n; }</code>
          <p>With each iteration, the loop increments n and adds that value to x. Therefore, x and n take on the following values:</p>
          <ul>
            <li>After the first pass: n = 1 and x = 1</li>
            <li>After the second pass: n = 2 and x = 3</li>
            <li>After the third pass: n = 3 and x = 6</li>
          </ul>
          <p>After completing the third pass, the condition n &lt; 3 is no longer true, so the loop terminates.</p>
        </article>
      </section>
       <section class="main-section" id="Function_declarations">
        <header>Function declarations</header>
        <article>
          <p>A function definition (also called a function declaration, or function statement) consists of the function keyword, followed by:</p>
          <ul>
            <li>The name of the function.</li>
            <li>A list of arguments to the function, enclosed in parentheses and separated by commas.</li>
            <li>The JavaScript statements that define the function, enclosed in
              curly brackets, { }.</li>
          </ul>
          <p>For example, the following code defines a simple function named square:</p>
          <code>function square(number) { return number * number; }</code>
          <p>The function square takes one argument, called number. The function consists of one statement that says to return the argument of the function (that is, number) multiplied by itself. The return statement specifies the value returned by the function.</p>
          <code>return number * number;</code>
          <p>Primitive parameters (such as a number) are passed to functions by value; the value is passed to the function, but if the function changes the value of the parameter, this change is not reflected globally or in the calling function.</p>
        </article>
      </section>
      <section class="main-section" id="Reference">
        <header>Reference</header>
        <article>
          <ul>
            <li>
              All the documentation in this page is taken from
              <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide" target="_blank">MDN</a>
            </li>
          </ul>
        </article>
      </section>
    </main>
    </body>
  </html>
