INTERMEDIATE ALGORITHM SCRIPTING

Sum All Numbers in a Range:
function sumAll(arr) {
  let minimumNumber = Math.min(arr[0], arr[1]);
  let maximumNumber = Math.max(arr[0], arr[1]);
  var result = 0;
    for (var i = minimumNumber; i <= maximumNumber; i += 1) {
      result += i;
  }
  return result;
}
sumAll([1, 4]);

Diff Two Arrays:
function diffArray(arr1, arr2) {
  const newArr = [];
    for (let i = 0; i < arr1.length; i += 1) {
      if (arr2.indexOf(arr1[i]) === -1) {
        newArr.push(arr1[i]);
      }
    }
  for (let j = 0; j < arr2.length; j += 1) {
    if(arr1.indexOf(arr2[j]) === -1) {
      newArr.push(arr2[j]);
    }
  }
  return newArr;
}
console.log(diffArray(["diorite", "andesite", "grass", "dirt", "pink wool", "dead shrub"], ["diorite", "andesite", "grass", "dirt", "dead shrub"]));

Seek and Destroy:
function destroyer(arr) {
  let survivingElements = [];
  let battleField = Object.values(arguments)[0];
  
  Convert HTML Entities:
  function convertHTML(str) {
  return str;
}
convertHTML("Dolce & Gabbana");
  let elementsToDestroy = Object.values(arguments).splice(1);

  for (let i = 0; i < battleField.length; i += 1) {
    let positionToRecon = battleField[i];
    if (elementsToDestroy.indexOf(positionToRecon) === -1) {
      survivingElements.push(positionToRecon);
    }
  }
  return survivingElements;
}
let result = destroyer([1, 2, 3, 1, 2, 3], 2, 3);

Wherefore art thou:
function whatIsInAName(collections, source) {
  var arr = [];
  collections.forEach(collection => {
    let index = 0;
    for (let key in source) {
      console.log(key, collection, source)
      if (collection[key] === source[key]) {
        index += 1;
      }
      if (index === Object.keys(source).length) {
        arr.push(collection);
      }
    }
  });
  return arr;
}
whatIsInAName([{ first: "Romeo", last: "Montague" }, { first: "Mercutio", last: null }, { first: "Tybalt", last: "Capulet" }], { last: "Capulet" });

Spinal Tap Case:
    FIRST SOLUTION
function spinalCase(str) {
  let camelCaseHandled = str.replace(/([a-z])([A_Z])/g, "$1 $2");
  let spacesAndDashedHandled = camelCaseHandled.replace(/\s|_/g, "-");
  return spacesAndDashedHandled.toLowerCase();
}
let result = spinalCase('thisIsSpinalTap');
console.log(result);

    SECOND SOLUTION
function spinalCase(str) {
  return str.replace(/\s|_/g, "-").replace(/([a-z])([A_Z])/g, "$1-$2").toLowerCase();
}
console.log(spinalCase('This Is Spinal Tap'));

    THIRD SOLUTION
function spinalCase(str) {
  return str
    .split(/\s|_|(?=[A_Z])/)
    .join("-")
    .toLowerCase();
}
spinalCase('This Is Spinal Tap');

    FOURTH SOLUTION 
function spinalCase(str) {
  str = str.replace(/([a-z])([A-Z])/g, "$1 $2");
  return str
  .toLowerCase()
  .split(/(?:_| )+/)
  .join("-");
}
spinalCase('This Is Spinal Tap');

Pig Latin:
function translatePigLatin(str) {
  let vowels = "aeiou".split("");
  for (let i = 0; i < str.length; i += 1) {
    let individualLetter = str[i];
    if (vowels.indexOf(individualLetter) != -1 && i === 0) {
      return str + "way";
    }    
    if (vowels.indexOf(individualLetter) != -1) {
      return str.slice(i) + str.slice(0, i) + "ay";
    }
  }
  return str + "ay";
}
let result = translatePigLatin("rhythm");

Search and Replace:
function myReplace(str, before, after) {
  let stringCollection = str.split(" ");
  for (let i = 0; i < stringCollection.length; i += 1) {
    if (stringCollection[i] === before) {
      if (stringCollection[i] [0] === stringCollection[i][0].toUpperCase()) {
        after = after[0].toUpperCase() + after.slice(1);
      };
      stringCollection[i] = after;
    }
  }
  return stringCollection.join(" ");
}
let result = myReplace("I think we should look up there", "up", "Down");
console.log(result);

DNA Pairing:
function pairElement(str) {
  const matchWithBasePair = function(char) {
    switch (char) {
      case "A":
        return ["A", "T"];
      case "T":
        return ["T", "A"];
      case "C":
        return ["C", "G"];
      case "G":
        return ["G", "C"];
    }
  };
  const pairs = [];
  for (let i = 0; i < str.length; i++) {
    pairs.push(matchWithBasePair(str[i]));
  }
  return pairs;
}
pairElement("GCG");

Missing letters:
function fearNotLetter(str) {
  for (let i = 1; i < str.length; ++i) {
    if (str.charCodeAt(i) - str.charCodeAt(i - 1) > 1) {
      return String.fromCharCode(str.charCodeAt(i - 1) + 1);
    }
  }
}

Sorted Union:
function convertHTML(str) {
  const htmlEntities = {
    "&": "&amp;",
    "<": "&lt;",
    ">": "&gt;",
    '"': "&quot;",
    "'": "&apos;"
  };
  return str
    .split("")
    .map(entity => htmlEntities[entity] || entity)
    .join("");
}
convertHTML("Dolce & Gabbana");

Sum All Odd Fibonacci Numbers:
function sumFibs(num) {
  let fibbonacciSequence = [0, 1];
  let counter = fibbonacciSequence[fibbonacciSequence.length - 2] +
                fibbonacciSequence[fibbonacciSequence.length - 1]
  while (counter <= num) {
    fibbonacciSequence.push(counter);
    counter = fibbonacciSequence[fibbonacciSequence.length - 2] +
              fibbonacciSequence[fibbonacciSequence.length - 1]
  }
  let sumOfOddFibbonacciNumbers = 0;
  fibbonacciSequence.forEach(function(num) {
    if (num % 2 !=0) {
      sumOfOddFibbonacciNumbers += num;
    }
  });
  return sumOfOddFibbonacciNumbers;
}
let result = sumFibs(4);
console.log(result);

Sum All Primes:
function sumPrimes(num) {
  if (num <= 1) {
    return "Numbers lower than 0 don't work here"
  }
  let counter = 2;
  let sum = 0;
  while (counter <= num) {
    if (isPrime(counter)) {
      sum += counter;
    }
    counter += 1;
  }
  return sum;
}
 function isPrime(singleNumber) {
   let counter = 2;
   while (counter < singleNumber) {
     if (singleNumber % counter === 0) {
       return false;
     }
     counter += 1;
   }
   return true;
 }
let result = sumPrimes(10);
console.log(result);

Smallest Common Multiple:
function smallestCommons(arr) {
  let lowerNum, higherNum;
  if (arr[0] > arr[1]) {
    lowerNum = arr[1];
    higherNum = arr[0];    
  } else {
    lowerNum = arr[0];
    higherNum= arr[1];
  }

  let range = getRange(lowerNum, higherNum);
  
  let multiple = 1;
  while (multiple < 1000000) {
    let higherCommonMultiple = (lowerNum * multiple) * higherNum;
    
    let trueCount = 0;
    for (let i = 0; i < range.length; i += 1) {
//console.log(higherCommonMultiple, range);   

      if (higherCommonMultiple % range[i] === 0) {
        trueCount += 1;

//console.log("true count = ", trueCount, "Range Length = ", range.length);
        if (trueCount === range.length) {
          return higherCommonMultiple;
        }
      }
    }

    multiple += 1; 
  }

  return arr;
}

function getRange(lowN, highN) {
  let resultRange = [];
  for (let i = lowN; i <= highN; i += 1) {
    resultRange.push(i);
  }
  return resultRange;
}

let result = smallestCommons([1,5]);
console.log(result);

Drop it:
function dropElements(arr, func) {
  let result = [];
  for (let i = 0; i < arr.length; i += 1) {
    console.log(arr[i], func(arr[i]), arr.slice(i));
    if (func(arr[i])) {
      return arr.slice(i);
    }
  }
  return result;
}
let result = dropElements([1, 2, 3, 4], function(n) {return n < 3; });

Steamroller:
    SOLUTION 1
function steamrollArray(arr) {
  return arr.flat().flat().flat();
}
let result = steamrollArray([1, [2], [3, [[[4]]]]]);
console.log(result);

    SOLUTION 2
    function steamrollArray(arr) {
  const flat = [].concat(...arr);
  return flat.some(Array.isArray) ? steamrollArray(flat) : flat;
}
steamrollArray([1, [2], [3, [[4]]]]);

Binary Agents:
function binaryAgent(str) {
  return str.split(" ").map(binaryDataPoint => {
    let characterCode = parseInt(binaryDataPoint, 2);
    let decipheredLetter = String.fromCharCode(characterCode);
    return decipheredLetter;
  }).join("");  
}
let binaryData = ("01000001 01110010 01100101 01101110 00100111 01110100 00100000 01100010 01101111 01101110 01100110 01101001 01110010 01100101 01110011 00100000 01100110 01110101 01101110 00100001 00111111");
let result = binaryAgent(binaryData);
console.log(result);

Everything Be True:
    SOLUTION 1
function truthCheck(collection, pre) {
  return collection.every(function(dataPoint) {
    return dataPoint[pre];
  });

  // let result = true;
  // for (let i = 0; i < collection.length; i += 1) {
  //   console.log(collection[i][pre]);
  //   if (
  //     Number.isNaN(collection[i][pre]) ||
  //     collection[i][pre] === undefined ||
  //     collection[i][pre] === null ||
  //     collection[i][pre] === 0 ||
  //     collection[i][pre] === ""  
  //   ) {
  //     result = false;
  //   }
  // }
  // return result;  
}
let finalAnswer = truthCheck([{"single": "double"}, {"single": NaN}], "single");
  
    SOLUTION 2
function truthCheck(collection, pre) {
  return collection.every(function(dataPoint) {
    return dataPoint[pre];
  });
}
let finalAnswer = truthCheck([{"single": "double"}, {"single": NaN}], "single");

Arguments Optional:
function addTogether() {
  const [first, second] = arguments;
  if (typeof(first) !== "number")
    return undefined;
  if (arguments.length === 1)
    return (second) => addTogether(first, second);
  if (typeof(second) !== "number")
    return undefined;
  return first + second;
}

Make a Person:
const Person = function(firstAndLast) {
  // Only change code below this line
  // Complete the method below and implement the others similarly
  this.getFullName = function() {
    return "";
  };
  return firstAndLast;
};
const bob = new Person('Bob Ross');
bob.getFullName();
