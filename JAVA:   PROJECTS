JAVA PROJECTS

PALINDROME CHECKER:
function palindrome(str) {
  let polishedString = str.replace(/\W+|_/g, "").toLowerCase();
  let reversedString = polishedString.split("").reverse().join("");
  console.log(polishedString, reversedString)
  if (polishedString != reversedString) {
    return false;
  }
  return true;
}
let result = palindrome("eye");

ROMAN NUMERAL CONVERTER:
function convertToRoman(num) {
  let romanNumeral = "";

  while (num > 0) {
    if (num < 4) {
      romanNumeral += "I";
      num -= 1
    } else if (num == 4) {
      romanNumeral += "IV";
      num -= 4;
    } else if (num >= 5 && num < 9) {
      romanNumeral += "V";
      num -= 5;
    } else if (num === 9) {
      romanNumeral += "IX";
      num -= 9;
    } else if (num >= 10 && num < 40) {
      romanNumeral += "X";
      num -= 10;
    } else if (num >= 40 && num < 50) {
      romanNumeral += "XL";
      num -= 40;
    } else if (num >= 50 && num < 90) {
      romanNumeral += "L";
      num -= 50;
    } else if (num >= 90 && num < 100) {
      romanNumeral += "XC";
      num -= 90;
      } else if (num >= 100 && num < 400) {
      romanNumeral += "C";
      num -= 100;
    } else if (num >= 400 && num < 500) {
      romanNumeral += "CD";
      num -= 400;
    } else if (num >= 500 && num < 900) {
      romanNumeral += "D";
      num -= 500;
    } else if (num >= 900 && num < 1000) {
      romanNumeral += "CM";
      num -= 900;
    } else if (num >= 1000) {
      romanNumeral += "M";
      num -= 1000;
    } else {
      romanNumeral += "Error";
      num -= 1;
    }
  }
  return romanNumeral;
}
console.log(convertToRoman(3999));

CAESARS CIPHER:
function rot13(str) {
    let decodedResult = "";
    let alphabetStart = "abcdefghijklm".toUpperCase();
    let alphabetEnd = "nopqrstuvwxyz".toUpperCase();

    for (let i = 0; i < str.length; i += 1) {
      let letterToDecode = str[i];

      if (alphabetStart.indexOf(letterToDecode) >= 0) {
        decodedResult += alphabetEnd[alphabetStart.indexOf(letterToDecode)];
      } else if (alphabetEnd.indexOf(letterToDecode) >= 0) {
        decodedResult += alphabetStart[alphabetEnd.indexOf(letterToDecode)];
      } else {
        decodedResult += letterToDecode;
      }
    }
    return decodedResult;
}
let result = rot13("SERR PBQR PNZC");

TELEPHONE NUMBER VALIDATOR:
    SOLUTION 1 - not working
function telephoneCheck(str) {
  if (str.indexOf("(") === -1 && str.indexOf(")") > -1) return false;
  if (str.indexOf(")") - str.indexOf("(") >= 5) return false;
  if (str[0] === "-") return false;
  
  let polishedPhone = str.replace(/-| /g, "");

  if (polishedPhone.indexOf("(") < polishedPhone.indexOf(")")) {
    polishedPhone = polishedPhone.replace(/\(|\)/g, "");
  }

  if (polishedPhone.length === 10) {
    return true;
  } else if (polishedPhone.length === 11 && polishedPhone[0] === "1") {
    return true;
  }

  return false;
}

let result = telephoneCheck("1 (555) 555-5555");
console.log(result);

    SOLUTION 2 - passes
function telephoneCheck(str) {
  let regex = /^([1]\s?)?(\([0-9]{3}\)|[0-9]{3})(\s|-)?[0-9]{3}(\s|-)?[0-9]{4}$/g;
  return regex.test(str);  
}
telephoneCheck("555-555-5555");

CASH REGISTER:
const checkCashRegister = (price, cash, cid) => {
  const UNIT_AMOUNT = {
    "PENNY": .01,
    "NICKEL": .05,
    "DIME": .10,
    "QUARTER": .25,
    "ONE": 1.00,
    "FIVE": 5.00,
    "TEN": 10.00,
    "TWENTY": 20.00,
    "ONE HUNDRED": 100.00
  }
  let totalCID = 0;
  for (let element of cid) {
    totalCID += element[1];
  }
  totalCID = totalCID.toFixed(2);
  let changeToGive = cash - price;
  const changeArray = [];
  if (changeToGive > totalCID) {
    return { status: "INSUFFICIENT_FUNDS", change: changeArray };
  } else if (changeToGive.toFixed(2) === totalCID) {
    return { status: "CLOSED", change: cid };
  } else {
    cid = cid.reverse();
    for (let elem of cid) {
      let temp = [elem[0], 0];
      while (changeToGive >= UNIT_AMOUNT[elem[0]] && elem[1] > 0) {
        temp[1] += UNIT_AMOUNT[elem[0]];
        elem[1] -= UNIT_AMOUNT[elem[0]];
        changeToGive -= UNIT_AMOUNT[elem[0]];
        changeToGive = changeToGive.toFixed(2);
      }
      if (temp[1] > 0) {
        changeArray.push(temp);
      }
    }
  }
  if (changeToGive > 0) {
    return { status: "INSUFFICIENT_FUNDS", change: [] };
  }
  return { status: "OPEN", change: changeArray};
}
