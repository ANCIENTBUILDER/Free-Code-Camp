JavaScript Algorithms and Data Structures

Escape Sequences in Strings:
const myStr = "FirstLine\n\t\\SecondLine\nThirdLine";

Concatenating Strings with Plus Operator:
const myStr = "This is the start. "+"This is the end.";

Concatenating Strings with the Plus Equals Operator:
let myStr = "This is the first sentence. ";
myStr += "This is the second sentence."

Constructing Strings with Variables:
const myName = "Rik";
const myStr = "My name is " + myName + " and I am well!";

Appending Variables to Strings:
const someAdjective = "the bomb";
let myStr = "Learning to code is ";
myStr += someAdjective;

Find the Length of a String:
lastNameLength = lastName.length;

Use Bracket Notation to Find the First Character in a String:
firstLetterOfLastName = lastName[0]; // Change this line

Understand String Immutability:
myStr = "Hello World";

Use Bracket Notation to Find the Nth Character in a String:
const thirdLetterOfLastName = lastName[2];

Use Bracket Notation to Find the Last Character in a String:
const lastLetterOfLastName = lastName[lastName.length - 1];

Use Bracket Notation to Find the Nth-to-Last Character in a String:
const secondToLastLetterOfLastName = lastName[lastName.length -2];

Word Blanks:
const wordBlanks = "My " + myAdjective + " " + myNoun + " " + myVerb + " " + myAdverb + ".";

Store Multiple Values in one Variable using JavaScript Arrays
const myArray = ["The number is ", + "7"];

Nest one Array within Another Array 
const myArray = [["Bulls", 23], ["White Sox", 45]];

Access Array Data with Indexes:
const myArray = [50, 60, 70];
const myData = myArray[0];

Modify Array Data With Indexes:
const myArray = [18, 64, 99];
myArray[0] = 45;

Access Multi-Dimensional Arrays With Indexes:
const myArray = [
  [1, 2, 3],
  [4, 5, 6],
  [7, 8, 9],
  [[10, 11, 12], 13, 14],
];
const myData = myArray[0][0];
https://www.youtube.com/watch?v=3zUVQZc4XDc

Access Multi-Dimensional Arrays With Indexes:
const myData = myArray [2] + [1];

Manipulate Arrays With push():
const myArray = [["John", 23], ["cat", 2], ["dog", 3]];

Manipulate Arrays With pop():
const removedFromMyArray = myArray.pop();

Manipulate Arrays With shift():
const myArray = [["John", 23], ["dog", 3]];
const removedFromMyArray = myArray.shift();

Manipulate Arrays With unshift():
const myArray = [["John", 23], ["dog", 3]];
myArray.shift();
myArray.unshift(["Paul", 35]);

**********  1. pop removes from end of array, 2. shift removes from front of array, 3. unshift adds to front of array, 4. push adds to end of array

Shopping List
const myList = [["Chocolate Bar", 15], ["Steak", 3], ["Rice", 1], ["Salt", 1], ["Ice Cream", 2]];

Write Reusable JavaScript with Functions:
function reusableFunction() {
  console.log("Hi World");
}
reusableFunction();

Passing Values to Functions with Arguments:
// Example
function ourFunctionWithArgs(a, b) {
  console.log(a, b);
}

function testFun(param1, param2) {
  console.log(param1, param2);
}

testFun("3", "16");

// Only change code below this line.

function functionWithArgs(one, two) {
  console.log(one + two);
}

functionWithArgs(22,2);

Return a Value from a Function with Return:
function timesFive(num) {
  return num * 5;
}

console.log(timesFive(5));
console.log(timesFive(2));
console.log(timesFive(0));

Global Scope and Functions:
// Declare the myGlobal variable below this line
const myGlobal = 10;

function fun1() {
  // Assign 5 to oopsGlobal here
oopsGlobal = 5;
}

// Only change code above this line

function fun2() {
  let output = "";
  if (typeof myGlobal != "undefined") {
    output += "myGlobal: " + myGlobal;
  }
  if (typeof oopsGlobal != "undefined") {
    output += " oopsGlobal: " + oopsGlobal;
  }
  console.log(output);
}

Local Scope and Functions:
function myLocalScope() {
  // Only change code below this line
const myVar = "G'day mate";
  console.log('inside myLocalScope', myVar);
}
myLocalScope();

// Run and check the console
// myVar is not defined outside of myLocalScope
//console.log('outside myLocalScope', myVar);

Global vs. Local Scope in Functions:
// Setup
const outerWear = "T-Shirt";

function myOutfit() {
  // Only change code below this line
var outerWear = "sweater";
  // Only change code above this line
  return outerWear;
}

myOutfit();

console.log(myOutfit());

Understanding Undefined Value returned from a Function:       ************************************* wrong
function addFive() {
  sum = sum + 5;
}

Assignment with a Returned Value:
processed = processArg(7);

Stand in Line:
 arr.push(item)
  item = arr.shift()
  return item;

Understanding Boolean Values:
  return true;  
  
Use Conditional Logic with If Statements:
if (wasThatTrue) {
  return "Yes, that was true";
}

  return "No, that was false";
  
  Comparison with the Equality Operator:
// Setup
function testEqual(val) {
  if (val == 12) { // Change this line
    return "Equal";
  }
  return "Not Equal";
}

testEqual(10);

Comparison with the Strict Equality Operator:
// Setup
function testStrict(val) {
  if (val === 7) { // Change this line
    return "Equal";
  }
  return "Not Equal";
}

testStrict(10);

Practice comparing different values:
// Setup
function compareEquality(a, b) {
  if (a === b) { // Change this line
    return "Equal";
  }
  return "Not Equal";
}

compareEquality(10, "10");

Comparison with the Inequality Operator:
// Setup
function testNotEqual(val) {
  if (val != 99) { // Change this line
    return "Not Equal";
  }
  return "Equal";
}

testNotEqual(10);

Comparison with the Strict Inequality Operator:
// Setup
function testStrictNotEqual(val) {
  if (val !== 17) { // Change this line
    return "Not Equal";
  }
  return "Equal";
}

testStrictNotEqual(10);

Comparison with the Greater Than Operator:
function testGreaterThan(val) {
  if (val > 100) {  // Change this line
    return "Over 100";
  }

  if (val > 10) {  // Change this line
    return "Over 10";
  }

  return "10 or Under";
}

testGreaterThan(10);

Comparison with the Greater Than Or Equal To Operator:
function testGreaterOrEqual(val) {
  if (val >= 20) {  // Change this line
    return "20 or Over";
  }

  if (val >= 10) {  // Change this line
    return "10 or Over";
  }

  return "Less than 10";
}

testGreaterOrEqual(10);

Comparison with the Less Than Operator:
function testLessThan(val) {
  if (val < 25) {  // Change this line
    return "Under 25";
  }

  if (val < 55) {  // Change this line
    return "Under 55";
  }

  return "55 or Over";
}

testLessThan(10);

Comparison with the Less Than Or Equal To Operator:
function testLessOrEqual(val) {
  if (val <= 12) {  // Change this line
    return "Smaller Than or Equal to 12";
  }

  if (val <= 24) {  // Change this line
    return "Smaller Than or Equal to 24";
  }

  return "More Than 24";
}

testLessOrEqual(10);

Comparisons with the Logical And Operator:
function testLogicalAnd(val) {
  // Only change code below this line

  if (val <= 50 && val >=25) {
      return "Yes";
  }

  // Only change code above this line
  return "No";
}

testLogicalAnd(10);

Comparisons with the Logical Or Operator:
function testLogicalOr(val) {
  // Only change code below this line

  if (val > 20 || val < 10) {
    return "Outside";
  }

  // Only change code above this line
  return "Inside";
}

testLogicalOr(15);

Introducing Else Statements:
function testElse(val) {
  let result = "";
  // Only change code below this line

  if (val > 5) {
    result = "Bigger than 5";
  } else {
    result = "5 or Smaller";
  }

  // Only change code above this line
  return result;
}

testElse(4);

Introducing Else If Statements:
function testElseIf(val) {
  if (val > 10) {
    return "Greater than 10";
  } else if (val < 5) {
    return "Smaller than 5";
  } else {
    return "Between 5 and 10";
  }
}

testElseIf(7);

Logical Order in If Else Statements:
function orderMyLogic(val) {
  if (val < 5) {
    return "Less than 5";
  } else if (val < 10) {
    return "Less than 10";
  } else {
    return "Greater than or equal to 10";
  }
}

orderMyLogic(7);

Chaining If Else Statements:
function testSize(num) {
  // Only change code below this line

if (num < 5) {
  return "Tiny";
  }else if (num < 10) {
    return "Small";
  }else if (num < 15) {
    return "Medium";
  }else if (num < 20) {
    return "Large";
  }else {
    return "Huge";
  }
  
  return "Change Me";
  // Only change code above this line
}

testSize(7);

Golf Code:
const names = ["Hole-in-one!", "Eagle", "Birdie", "Par", "Bogey", "Double Bogey", "Go Home!"];

function golfScore(par, strokes) {
  // Only change code below this line
if (strokes === 1) {
  return names[0];
}else if (strokes <= par - 2) {
  return names[1];
}else if (strokes <= par - 1) {
  return names[2];
}else if (strokes === par) {
  return names[3];
}else if (strokes === par + 1) {
  return names[4];
}else if (strokes === par + 2) {
  return names[5];
}else {
  return names[6];
}

  // Only change code above this line
}

golfScore(5, 4);

Selecting from Many Options with Switch Statements:
function caseInSwitch(val) {
  let answer = "";
  // Only change code below this line

switch (val) {
  case 1:
    answer = "alpha";
    break;
  case 2:
    answer = "beta";
    break;
  case 3:
    answer = "gamma";
    break;
  case 4:
    answer = "delta";
    break;
}

  // Only change code above this line
  return answer;
}

caseInSwitch(1);

Adding a Default Option in Switch Statements:
function switchOfStuff(val) {
  let answer = "";
  // Only change code below this line

switch (val) {
  case "a":
    answer = "apple";
    break;
  case "b":
    answer = "bird";
    break;
  case "c":
    answer = "cat";
    break;
  default:
    answer = "stuff"
    break;
}

  // Only change code above this line
  return answer;
}

switchOfStuff(1);

Multiple Identical Options in Switch Statements:
function sequentialSizes(val) {
  let answer = "";
  // Only change code below this line

switch(val) {
  case 1:
  case 2:
  case 3:
    answer = "Low";
    break;
  case 4:
  case 5:
  case 6:
    answer = "Mid";
    break;
  case 7:
  case 8:
  case 9:
    answer = "High";
    break;
}

  // Only change code above this line
  return answer;
}

sequentialSizes(1);

Replacing If Else Chains with Switch:
function chainToSwitch(val) {
  let answer = "";
  // Only change code below this line

switch (val) {
  case "bob":
    answer = "Marley";
    break;
  case 42:
    answer = "The Answer";
    break;
  case 1:
    answer = "There is no #1";
    break;
  case 99:
    answer = "Missed me by this much!";
    break;
  case 7:
    answer = "Ate Nine";
}

  // Only change code above this line
  return answer;
}

chainToSwitch(7);

Returning Boolean Values from Functions:
function isLess(a, b) {
  // Only change code below this line
return a < b;
  // Only change code above this line
}

isLess(10, 15);

Return Early Pattern for Functions:
// Setup
function abTest(a, b) {
  // Only change code below this line

if (a < 0 || b < 0){
  return undefined;
}

  // Only change code above this line

  return Math.round(Math.pow(Math.sqrt(a) + Math.sqrt(b), 2));
}

abTest(2,2);

console.log(abTest(0, 0))

Counting Cards:
let count = 0;

function cc(card) {
  // Only change code below this line

switch (card) {
  case 2:
  case 3:
  case 4:
  case 5:
  case 6:
    count += 1;
    break;
  case 7:
  case 8:
  case 9:
    count += 1;
  case 10:
  case "J":
  case "Q":
  case "K":
  case "A":
    count -= 1;
    break;
}

var action ="";

if (count > 0) {
  action = "Bet";
} else {
  action = "Hold";
}

  return `${count} ${action}`;
  // Only change code above this line
}

cc(2); cc(3); cc(7); cc('K'); cc('A');

Build JavaScript Objects:    **********************************************************************
const myDog = {
  // Only change code below this line

  "name": "The Black Key",
  "legs": 4,
  "tails": 1,
  "friends": ["lassy", "spot"]

  // Only change code above this line
};

Accessing Object Properties with Dot Notation:
// Setup
const testObj = {
  "hat": "ballcap",
  "shirt": "jersey",
  "shoes": "cleats"
};

// Only change code below this line
const hatValue = testObj.hat;      // Change this line
const shirtValue = testObj.shirt;    // Change this line

Accessing Object Properties with Bracket Notation:    *********************************************
// Setup
const testObj = {
  "an entree": "hamburger",
  "my side": "veggies",
  "the drink": "water"
};

// Only change code below this line
const entreeValue = testObj["an entree"];   // Change this line
const drinkValue = testObj["the drink"];    // Change this line

Accessing Object Properties with Variables:    ****************************************************    repeat to get this down
// Setup
const testObj = {
  12: "Namath",
  16: "Montana",
  19: "Unitas"
};

// Only change code below this line
const playerNumber = 16;  // Change this line
const player = testObj[playerNumber];   // Change this line

Updating Object Properties:   *********************************************************************    repeat to get this down
// Setup
const myDog = {
  "name": "Coder",
  "legs": 4,
  "tails": 1,
  "friends": ["freeCodeCamp Campers"]
};

// Only change code below this line
myDog.name = "Happy Coder";

Add New Properties to a JavaScript Object:
const myDog = {
  "name": "Happy Coder",
  "legs": 4,
  "tails": 1,
  "friends": ["freeCodeCamp Campers"]
};

myDog.bark = "woof";

Delete Properties from a JavaScript Object:
// Setup
const myDog = {
  "name": "Happy Coder",
  "legs": 4,
  "tails": 1,
  "friends": ["freeCodeCamp Campers"],
  "bark": "woof"
};

// Only change code below this line
delete myDog.tails

Testing Objects for Properties:
function checkObj(obj, checkProp) {
  // Only change code below this line
if (obj.hasOwnProperty(checkProp)){
  return obj[checkProp]
}else {
  return "Not Found";
}
  // Only change code above this line
}

Manipulating Complex Objects:
const myMusic = [
  {
    "artist": "Billy Joel",
    "title": "Piano Man",
    "release_year": 1973,
    "formats": [
      "CD",
      "8T",
      "LP"
    ],
    "gold": true
  },
  {
    "artist": "Rockstar",
    "title": "Rock Music",
    "release_year": 2021,
    "formats": [
      "CD",
      "8T"
    ]
  }
];

Accessing Nested Objects:
const myStorage = {
  "car": {
    "inside": {
      "glove box": "maps",
      "passenger seat": "crumbs"
     },
    "outside": {
      "trunk": "jack"
    }
  }
};

const gloveBoxContents = myStorage.car.inside["glove box"];

Accessing Nested Arrays:
const myPlants = [
  {
    type: "flowers",
    list: [
      "rose",
      "tulip",
      "dandelion"
    ]
  },
  {
    type: "trees",
    list: [
      "fir",
      "pine",
      "birch"
    ]
  }
];

const secondTree = myPlants[1].list[1];

Record Collection:
// Setup
const recordCollection = {
  2548: {
    albumTitle: 'Slippery When Wet',
    artist: 'Bon Jovi',
    tracks: ['Let It Rock', 'You Give Love a Bad Name']
  },
  2468: {
    albumTitle: '1999',
    artist: 'Prince',
    tracks: ['1999', 'Little Red Corvette']
  },
  1245: {
    artist: 'Robert Palmer',
    tracks: []
  },
  5439: {
    albumTitle: 'ABBA Gold'
  }
};

// Only change code below this line
function updateRecords(records, id, prop, value) {
  if (prop !== "tracks" && value !== ""){
    records[id][prop] = value;
  } else if (prop === "tracks" && records[id].
  hasOwnProperty("tracks") === false){
    records[id][prop] = [value];
  } else if (prop === "tracks" && value !== ""){
    records[id][prop].push(value);
  } else if (value === ""){
    delete records[id][prop];
  }
  return records;
}
updateRecords(recordCollection, 5439, 'artist', 'ABBA');

Iterate with JavaScript While Loops:
// Setup
const myArray = [];

// Only change code below this line
var i = 5;
while (i >= 0){
  myArray.push(i);
  i--;
}

Iterate with JavaScript For Loops:
// Setup
const myArray = [];

// Only change code below this line

for (var i = 1; i <= 5; i++){
  myArray.push(i);
}

Iterate Odd Numbers With a For Loop:
// Setup
const myArray = [];

// Only change code below this line

for (let i = 1; i <= 9; i+= 2){
  myArray.push(i);
}

Count Backwards With a For Loop:
// Setup
const myArray = [];

// Only change code below this line

for (var i = 9; i > 0; i -= 2){
  myArray.push(i);
}

Iterate Through an Array with a For Loop:
// Setup
const myArr = [2, 3, 4, 5, 6];

// Only change code below this line

var total = 0;

for (var i = 0; i < myArr.length; i++){
  total += myArr[i];
  console.log(total);
}

Nesting For Loops:
function multiplyAll(arr) {
  let product = 1;
  // Only change code below this line
for (var i = 0; i < arr.length; i++)
  for (var j = 0; j < arr[i].length; j++){
    product *= arr[i][j];
  }
  // Only change code above this line
  return product;
}

multiplyAll([[1, 2], [3, 4], [5, 6, 7]]);

Iterate with JavaScript Do...While Loops:
// Setup
const myArray = [];
let i = 10;

// Only change code below this line
while (i < 5) {
  myArray.push(i);
  i++;
}

do {
  myArray.push(i);
  i++;
} while (i < 10)

console.log(myArray)
